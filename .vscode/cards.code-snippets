{
	"creature": {
		"scope": "lua",
		"prefix": "creature",
		"description": "creature card",
		"body": [
			"-- Status: not tested",
			"",
			"function _Create(props)",
			"\tlocal result = CardWars:Creature(props)",
			"",
			"\t$0",
			"",
			"\treturn result",
			"end",
		]
	},
	"spell": {
		"scope": "lua",
		"prefix": "spell",
		"description": "spell card",
		"body": [
			"-- Status: not tested",
			"",
			"function _Create(props)",
			"\tlocal result = CardWars:Spell(props)",
			"",
			"\tresult.EffectP:AddLayer(",
			"\t\tfunction (playerI)",
			"\t\t\t-- $1",
			"\t\t\t",
			"\t\t\t$0",
			"\t\tend",
			"\t)",
			"",
			"\treturn result",
			"end",
		]
	},
	"floopfull": {
		"scope": "lua",
		"prefix": "floopfull",
		"description": "add floop ability",
		"body": [
			"result:AddActivatedEffect({",
			"\ttext = '$1',",
			"\ttags = {'floop'},",
			"\tcheckF = function (me, playerI, laneI)",
			"\t\treturn",
			"\t\t\tCommon.CanFloop(me) and",
			"\t\t\t${2}",
			"\tend,",
			"\tcostF = function (me, playerI, laneI)",
			"\t\tFloopCard(me.Original.Card.ID)",
			"\t\treturn true",
			"\tend,",
			"\teffectF = function (me, playerI, laneI)",
			"\t\t$0",
			"\tend",
			"})",
		]
	},
	"activated_ability": {
		"scope": "lua",
		"prefix": "aa",
		"description": "add activated ability",
		"body": [
			"result:AddActivatedEffect({",
			"\t-- $1 >>> $2",
			"",
			"\tmaxActivationsPerTurn = ${3:-1},",
			"\tcheckF = function (me, playerI, laneI)",
			"\t\t$4",
			"\tend,",
			"\tcostF = function (me, playerI, laneI)",
			"\t\t$5",
			"\tend,",
			"\teffectF = function (me, playerI, laneI)",
			"\t\t$0",
			"\tend",
			"})",
		]
	},
	"state_modifier": {
		"scope": "lua",
		"prefix": "statemod",
		"description": "add state modifier",
		"body": [
			"result:AddStateModifier(function (me, layer, zone)",
			"\t-- $1",
			"",
			"\tif layer == CardWars.ModificationLayers.${2:ATK_AND_DEF} and zone == CardWars.Zones.${3:IN_PLAY} then",
			"\t\t$0",
			"\tend",
			"",
			"end)",
		]
	},
	"turn_start": {
		"scope": "lua",
		"prefix": "turnstart",
		"description": "turn start trigger",
		"body": [
			"Common.Triggers.AtTheStartOfYourTurn(result, function (me, controllerI, laneI, args)",
			"\t$0",
			"end)"
		]
	},
	"enter_play": {
		"scope": "lua",
		"prefix": "enterplay",
		"description": "enter play effect",
		"body": [
			"result.OnEnterP:AddLayer(function(playerI, laneI, replaced)",
			"\t-- When $1 enters play, $2",
			"",
			"\t$0",
			"end)",
		]
	},
	"leave_play": {
		"scope": "lua",
		"prefix": "leaveplay",
		"description": "leave play effect",
		"body": [
			"result.OnLeavePlayP:AddLayer(function(playerI, laneI)",
			"\t-- When $1 leaves play, $2",
			"",
			"\t$0",
			"end)",
		]
	},
	"until_end_of_turn": {
		"scope": "lua",
		"prefix": "ueot",
		"description": "until end of turn effect",
		"body": [
			"UntilEndOfTurn(function (layer)",
			"\tif layer == CardWars.ModificationLayers.${1:ATK_AND_DEF} then",
			"\t\t$0",
			"\tend",
            "end)",
		]
	},
	"lane_change": {
		"scope": "lua",
		"prefix": "changelane",
		"description": "change lane effect",
		"body": [
			"result.OnMoveP:AddLayer(function(playerI, fromI, toI, wasStolen)",
			"\t-- When $1 changes Lanes${2: during a turn}, $3",
			"",
			"\t$0",
			"end)",
		]
	},
	"target_creature": {
		"scope": "lua",
		"prefix": "targetcreature",
		"description": "target creature",
		"body": [
			"local ids = Common.IDs(${1:Common.AllPlayers.Creatures()})",
            "local target = ${2:TargetCreature}(playerI, ids, '$3')",
			"$0"
		]
	},
	"building": {
		"scope": "lua",
		"prefix": "building",
		"description": "building card",
		"body": [
			"-- Status: not tested",
			"",
			"function _Create(props)",
			"\tlocal result = CardWars:InPlay(props)",
			"",
			"\t$0",
			"",
			"\treturn result",
			"end"
		]
	},
	"discard_a_card": {
		"scope": "lua",
		"prefix": "discardcard",
		"description": "discard a card",
		"body": [
			"local cards = STATE.Players[${1:playerI}].Hand",
            "local ids = {}",
            "for i = 1, cards.Count do",
            "    ids[#ids+1] = i - 1",
            "end",
			"",
            "local cardI = ChooseCardInHand(${1:playerI}, ids, '${2:Choose a card to discard}')",
            "DiscardFromHand(${1:playerI}, cardI)",
		]
	},
	"restriction": {
		"scope": "lua",
		"prefix": "restriction",
		"description": "add card play restriction",
		"body": [
			"Common.AddRestriction(result,",
			"\tfunction (playerI)",
			"\t\treturn nil, $0",
			"\tend",
			")"
		]
	},
	"hero": {
		"scope": "lua",
		"prefix": "hero",
		"description": "hero card",
		"body": [
			"-- Status: not tested",
			"",
			"function _Create(props)",
			"\tlocal result = CardWars:Hero(props)",
			"",
			"\t$0",
			"",
			"\treturn result",
			"end"
		]
	},
	"floop": {
		"scope": "lua",
		"prefix": "floop",
		"description": "add short floop ability",
		"body": [
			"Common.ActivatedEffects.Floop(result,",
			"\t'$1',",
			"\tfunction (me, playerI, laneI)",
			"\t\t$0",
			"\tend",
			")"
		]
	},
	"attack_defense_mod": {
		"scope": "lua",
		"prefix": "modatkdef",
		"description": "Attack and Defense modification for cards in play",
		"body": [
			"Common.State.ModATKDEF(result, function (me)",
			"\t$0",
			"end)",
		]
	},
	"cost_in_hand_mod": {
		"scope": "lua",
		"prefix": "modcost",
		"description": "card play cost modification (in hand)",
		"body": [
			"Common.State.ModCostInHand(result, function (me)",
			"\t$0",
			"end)",
		]
	},
}